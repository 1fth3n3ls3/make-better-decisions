import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Nav from "../components/Nav";
import Matrix from "../components/Matrix";
import { useState } from "react";

export default function Home() {
  const [criteria, setCriteria] = useState({
    name: "",
    weight: 1.0,
    scores: [],
  });
  const [criterias, setCriterias] = useState([]);
  const alternatives = ["Alternative 1", "Alternative 2"];

  function handleChange(event) {
    const data = event.target;
    console.log(event.target.value);
    setCriteria((prevCriteria) => {
      const newValue = {
        ...prevCriteria,
        [event.target.name]:
          event.target.name === "weight"
            ? event.target.value / 10
            : event.target.value,
        scores: alternatives.map(() => 0),
      };
      return newValue;
    });
  }

  function handleAddCriteria(event) {
    event.preventDefault();
    // console.log(criteria);

    const formData = event.target;
    setCriterias((prevCriterias) => {
      return [...prevCriterias, criteria];
    });
    // console.log(criterias);
  }
  function handleScore(scoreIndex, score, criteriaId, event) {
    console.log("score handled", scoreIndex, score, criteriaId);
    console.log(event.target.value);
    const newScoreValue = Number(event.target.value);
    // update values of score searching in all criterias and
    // updating the whole data. Treating objects as inmutable
    setCriterias((prevCriterias) =>
      prevCriterias.map((criteria, id) => {
        if (id === criteriaId) {
          const updatedScores = criteria.scores.map((value, i) => {
            return i === scoreIndex ? newScoreValue : value;
          });
          return { ...criteria, scores: updatedScores };
        }
        return criteria;
      })
    );
  }
  function handleWeight(criteriaId, event) {
    console.log("Weight handled", event.target.value, criteriaId);
    const newWeightValue = Number(event.target.value);
    // update values of score searching in all criterias and
    // updating the whole data. Treating objects as inmutable
    setCriterias((prevCriterias) =>
      prevCriterias.map((criteria, id) => {
        if (id === criteriaId) {
          return { ...criteria, weight: newWeightValue / 10 };
        }
        return criteria;
      })
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Nav></Nav>
        <form className={styles.form}>
          <div className={styles.inputs}>
            <div>
              <label htmlFor="name">
                <strong>New Criteria: </strong>
              </label>
              <input
                type="text"
                name="name"
                placeholder="Criteria title"
                onChange={handleChange}
                value={criteria.name}
                required
              />
            </div>
            <div>
              <label htmlFor="weight">
                <strong>Relative Weight: </strong>
              </label>
              <input
                type="number"
                name="weight"
                id="weight"
                min="1"
                max="10"
                onChange={handleChange}
                value={criteria.weight * 10}
                required
              />
            </div>
          </div>

          <button id={styles.addcriteria} onClick={handleAddCriteria}>
            <strong>Add Criteria</strong>
          </button>
        </form>
        <Matrix
          criterias={criterias}
          handleWeight={handleWeight}
          handleScore={handleScore}
        ></Matrix>
      </main>
      <footer className={styles.footer}>
        <a
          href="https://www.flaticon.com/free-icons/decision"
          title="decision icons"
        >
          Decision icons created by Freepik - Flaticon
        </a>
      </footer>
    </div>
  );
}
